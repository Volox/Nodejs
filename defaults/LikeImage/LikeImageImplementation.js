// Generated by CoffeeScript 1.3.1
(function() {
  var Like,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor; child.__super__ = parent.prototype; return child; };

  Like = (function(_super) {

    __extends(Like, _super);

    Like.name = 'Like';

    function Like() {
      this.run = __bind(this.run, this);

      this.createAnswer = __bind(this.createAnswer, this);

      this.getImages = __bind(this.getImages, this);

      this.createImage = __bind(this.createImage, this);

      this.getQuestion = __bind(this.getQuestion, this);

      this.like = __bind(this.like, this);

      this.init = __bind(this.init, this);
      return Like.__super__.constructor.apply(this, arguments);
    }

    Like.prototype.init = function() {
      var $sendBtn;
      this.imageField = 'imageUrl';
      this.getData(this.imageField, this.getImages);
      $sendBtn = $('#sendBtn');
      $sendBtn.click(this.run);
      return this.getDetails(this.getQuestion);
    };

    Like.prototype.like = function(evt) {
      var $button, liked, objectId;
      $button = $(evt.delegateTarget);
      objectId = $button.data('objectId');
      liked = this.toggleData("like_" + objectId);
      $button.empty();
      if (liked) {
        return $button.html('<i class="icon-thumbs-down"></i> Unlike');
      } else {
        return $button.html('<i class="icon-thumbs-up"></i> Like');
      }
    };

    Like.prototype.getQuestion = function(error, data) {
      var $question;
      if (!error) {
        $question = $('#question');
        return $question.text(data.question);
      }
    };

    Like.prototype.createImage = function(url, id) {
      var $html, $images, $img;
      $html = $('<li class="span4"><div class="thumbnail"><p class="center">' + '<button type="button" class="btn"><i class="icon-thumbs-up"></i> Like</button>' + '</p></div></li>');
      $images = $('#imageList');
      $images.append($html);
      $img = $('<img>', {
        src: url,
        height: 200
      });
      $img.attr('data-object-id', id);
      $html.find('.thumbnail').prepend($img);
      return $html.find('button').attr('data-object-id', id).click(this.like);
    };

    Like.prototype.getImages = function(error, data) {
      var image, index, objectId, self, _i, _len, _ref, _results;
      self = this;
      if (!error) {
        _ref = data.id;
        _results = [];
        for (index = _i = 0, _len = _ref.length; _i < _len; index = ++_i) {
          objectId = _ref[index];
          image = data[self.imageField][index];
          _results.push(self.createImage(image, objectId));
        }
        return _results;
      }
    };

    Like.prototype.createAnswer = function() {
      var answerObj, answers, key;
      answers = [];
      answerObj = {
        id: this.task,
        token: '4dogghraplkmfvovdk2qginbnv',
        userId: '',
        answers: answers
      };
      for (key in this.outputData) {
        answers.push({
          objectId: parseInt(key.replace('like_', ''))
        });
      }
      return this.outputData = answerObj;
    };

    Like.prototype.run = function(evt) {
      var $progress,
        _this = this;
      console.log('Run!');
      this.createAnswer();
      $progress = $('.progress');
      $progress.removeClass('hide');
      return this.postData(function(error, data) {
        if (!error) {
          $progress.addClass('progress-success');
          $progress.removeClass('active');
          $(evt.delegateTarget).prop('disabled', true);
          return alert('Data sent successfully');
        } else {
          return console.error(error, data);
        }
      });
    };

    return Like;

  })(uTask);

  $(function() {
    var LI;
    return LI = new Like;
  });

}).call(this);
