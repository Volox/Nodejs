// Generated by CoffeeScript 1.3.1
(function() {
  var Like,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor; child.__super__ = parent.prototype; return child; };

  Like = (function(_super) {

    __extends(Like, _super);

    Like.name = 'Like';

    function Like() {
      this.run = __bind(this.run, this);

      this.createAnswer = __bind(this.createAnswer, this);

      this.getImages = __bind(this.getImages, this);

      this.like = __bind(this.like, this);

      this.init = __bind(this.init, this);
      return Like.__super__.constructor.apply(this, arguments);
    }

    Like.prototype.init = function() {
      var $body, $postButton;
      console.log('Like init');
      this.getData('image', this.getImages);
      $body = $('body');
      $postButton = $('<button>', {
        text: 'Post results',
        click: this.run
      });
      $body.append($postButton);
    };

    Like.prototype.like = function(evt) {
      var $button, liked, objectId;
      $button = $(evt.target);
      objectId = $button.closest('div').data('objectId');
      liked = this.toggleData("like_" + objectId);
      if (liked) {
        $button.text('Unlike');
      } else {
        $button.text('Like');
      }
    };

    Like.prototype.getImages = function(error, data) {
      var $body, $container, $image, $like, image, index, objectId, _i, _len, _ref;
      if (!error) {
        $body = $('body');
        _ref = data.id;
        for (index = _i = 0, _len = _ref.length; _i < _len; index = ++_i) {
          objectId = _ref[index];
          image = data.field['image'][index];
          $container = $('<div>');
          $container.attr('data-object-id', objectId);
          $image = $('<img>', {
            src: image
          });
          $like = $('<button>', {
            text: 'Like',
            click: this.like
          });
          $container.append($image);
          $container.append($like);
          $body.append($container);
        }
      }
    };

    Like.prototype.createAnswer = function() {
      var answerObj, answers, key;
      answers = [];
      answerObj = {
        id: this.task,
        token: '',
        userId: '',
        answers: answers
      };
      for (key in this.outputData) {
        answers.push({
          objectId: parseInt(key.replace('like_', ''))
        });
      }
      this.outputData = answerObj;
    };

    Like.prototype.run = function(evt) {
      var _this = this;
      console.log('Run!');
      this.createAnswer();
      this.postData(function(error, data) {
        if (!error) {
          alert('Data sent successfully');
          $(evt.target).prop('disabled', true);
        } else {
          alert(data);
        }
      });
    };

    return Like;

  })(uTask);

  $(function() {
    var LI;
    return LI = new Like;
  });

}).call(this);
