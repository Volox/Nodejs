// Generated by CoffeeScript 1.3.1
(function() {
  var Task;

  Task = (function() {

    Task.name = 'Task';

    function Task(id) {
      this.id = id;
      this.url = "/tasks/" + this.id;
      this.codeUrl = this.url + '/code';
      this.resourcesUrl = this.url + '/resources';
      this.detailsUrl = this.url + '/details/json';
      this.resultUrl = this.url + '/result';
      this.name = null;
      this.id = null;
      this.description = null;
      this.code = null;
      this.result = null;
      this.taskInstance = null;
      this.readyCallbacks = [];
    }

    Task.prototype.init = function() {
      var _this = this;
      $.ajax({
        url: this.detailsUrl,
        type: 'get',
        dataType: 'json',
        success: function(data, textStatus, jqXHR) {
          _this.name = data.name;
          _this.code = data.code;
          _this.description = data.description;
          _this.id = data._id;
          _this.taskInstance = eval(_this.code);
          _this.ready();
        },
        error: function(jqXHR, textStatus, errorThrown) {
          console.log('error', arguments);
        }
      });
    };

    Task.prototype.ready = function() {
      var callback, _i, _len, _ref;
      _ref = this.readyCallbacks;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        callback = _ref[_i];
        callback();
      }
    };

    Task.prototype.onReady = function(callback) {
      this.readyCallbacks.push(callback);
    };

    Task.prototype.getCode = function(callback, errorCallback) {
      var _this = this;
      errorCallback = errorCallback || callback;
      $.ajax({
        url: this.codeUrl,
        type: 'get',
        success: function(data, textStatus, jqXHR) {
          _this.taskInstance = eval(data);
          callback.apply(null, arguments);
        },
        error: function(jqXHR, textStatus, errorThrown) {
          errorCallback.apply(null, arguments);
        }
      });
    };

    /*
    	addScript: (placeholder) ->
    		placeholder = placeholder || document
    
    		el = $ placeholder
    
    		# can't use jquery for debugging purposes
    		script = document.createElement 'script'
    		script.src = @codeUrl
    		el.each ->
    			this.appendChild script
    			return
    		
    		return
    */


    Task.prototype.run = function() {
      this.taskInstance.run();
    };

    Task.prototype.sendResult = function() {
      this.taskInstance.send(this.resultUrl);
    };

    return Task;

  })();

  window.Task = Task;

}).call(this);
